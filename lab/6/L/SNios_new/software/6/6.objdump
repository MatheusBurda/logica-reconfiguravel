
6.elf:     file format elf32-littlenios2
6.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00002020

Program Header:
    LOAD off    0x00001000 vaddr 0x00002000 paddr 0x00002000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00002020 paddr 0x00002020 align 2**12
         filesz 0x00000344 memsz 0x00000350 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00002000  00002000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000324  00002020  00002020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  00002344  00002344  00001344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          0000000c  00002364  00002364  00001364  2**2
                  ALLOC, SMALL_DATA
  4 .comment      00000026  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00001390  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000010e  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000093c  00000000  00000000  00001566  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000329  00000000  00000000  00001ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000b6f  00000000  00000000  000021cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000013c  00000000  00000000  00002d3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000001af  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000002a9  00000000  00000000  00003027  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_alt_sim_info 00000010  00000000  00000000  000032d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000020  00000000  00000000  000032e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .thread_model 00000003  00000000  00000000  00003d5b  2**0
                  CONTENTS, READONLY
 16 .cpu          00000003  00000000  00000000  00003d5e  2**0
                  CONTENTS, READONLY
 17 .qsys         00000001  00000000  00000000  00003d61  2**0
                  CONTENTS, READONLY
 18 .simulation_enabled 00000001  00000000  00000000  00003d62  2**0
                  CONTENTS, READONLY
 19 .stderr_dev   00000004  00000000  00000000  00003d63  2**0
                  CONTENTS, READONLY
 20 .stdin_dev    00000004  00000000  00000000  00003d67  2**0
                  CONTENTS, READONLY
 21 .stdout_dev   00000004  00000000  00000000  00003d6b  2**0
                  CONTENTS, READONLY
 22 .sopc_system_name 00000004  00000000  00000000  00003d6f  2**0
                  CONTENTS, READONLY
 23 .quartus_project_dir 0000000e  00000000  00000000  00003d73  2**0
                  CONTENTS, READONLY
 24 .sopcinfo     0001f67c  00000000  00000000  00003d81  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00002000 l    d  .entry	00000000 .entry
00002020 l    d  .text	00000000 .text
00002344 l    d  .rodata	00000000 .rodata
00002364 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00002054 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00002148 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00002294 g     F .text	00000040 alt_main
00002000 g     F .entry	0000000c __reset
00002368 g     O .bss	00000004 alt_argv
0000a364 g       *ABS*	00000000 _gp
00002284 g     F .text	00000008 __udivsi3
00002370 g       *ABS*	00000000 __bss_end
0000228c g     F .text	00000008 __umodsi3
00002370 g       *ABS*	00000000 end
00004000 g       *ABS*	00000000 __alt_stack_pointer
00002020 g     F .text	00000038 _start
00002308 g     F .text	0000001c alt_sys_init
00002370 g       *ABS*	00000000 __alt_stack_base
00002364 g       *ABS*	00000000 __bss_start
00002058 g     F .text	000000f0 main
0000236c g     O .bss	00000004 alt_envp
000021c4 g     F .text	00000060 __divsi3
000022d4 g     F .text	00000034 alt_irq_init
00002364 g     O .bss	00000004 alt_argc
00002364 g       *ABS*	00000000 _edata
00002370 g       *ABS*	00000000 _end
00002000 g       *ABS*	00000000 __alt_mem_memory
00002324 g     F .text	00000020 altera_nios2_qsys_irq_init
0000200c g       .entry	00000000 exit
00002224 g     F .text	00000060 __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
0000200c g       .entry	00000000 _exit



Disassembly of section .entry:

00002000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    2000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    2004:	08480814 	ori	at,at,8224
    jmp r1
    2008:	0800683a 	jmp	at

0000200c <_exit>:
	...

Disassembly of section .text:

00002020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    2020:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    2024:	ded00014 	ori	sp,sp,16384

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
    2028:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    202c:	d6a8d914 	ori	gp,gp,41828
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    2030:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    2034:	1088d914 	ori	r2,r2,9060

    movhi r3, %hi(__bss_end)
    2038:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    203c:	18c8dc14 	ori	r3,r3,9072

    beq r2, r3, 1f
    2040:	10c00326 	beq	r2,r3,2050 <_start+0x30>

0:
    stw zero, (r2)
    2044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    2048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    204c:	10fffd36 	bltu	r2,r3,2044 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    2050:	00022940 	call	2294 <alt_main>

00002054 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    2054:	003fff06 	br	2054 <alt_after_alt_main>

00002058 <main>:
#include <stdio.h>
#include "io.h"
#include "system.h"

int main()
{
    2058:	defff404 	addi	sp,sp,-48
    205c:	dfc00b15 	stw	ra,44(sp)
    2060:	df000a15 	stw	fp,40(sp)
    2064:	df000a04 	addi	fp,sp,40
    const char string[31] = "matheus augusto burda ++--+++ ";
    2068:	00c00034 	movhi	r3,0
    206c:	18c8d104 	addi	r3,r3,9028
    2070:	18800017 	ldw	r2,0(r3)
    2074:	e0bff815 	stw	r2,-32(fp)
    2078:	18800117 	ldw	r2,4(r3)
    207c:	e0bff915 	stw	r2,-28(fp)
    2080:	18800217 	ldw	r2,8(r3)
    2084:	e0bffa15 	stw	r2,-24(fp)
    2088:	18800317 	ldw	r2,12(r3)
    208c:	e0bffb15 	stw	r2,-20(fp)
    2090:	18800417 	ldw	r2,16(r3)
    2094:	e0bffc15 	stw	r2,-16(fp)
    2098:	18800517 	ldw	r2,20(r3)
    209c:	e0bffd15 	stw	r2,-12(fp)
    20a0:	18800617 	ldw	r2,24(r3)
    20a4:	e0bffe15 	stw	r2,-8(fp)
    20a8:	1880070b 	ldhu	r2,28(r3)
    20ac:	e0bfff0d 	sth	r2,-4(fp)
    20b0:	18800783 	ldbu	r2,30(r3)
    20b4:	e0bfff85 	stb	r2,-2(fp)
    int i = 0;
    20b8:	e03ff715 	stw	zero,-36(fp)
    for (i=0; i<1024; i++){
    20bc:	e03ff715 	stw	zero,-36(fp)
    20c0:	00001806 	br	2124 <main+0xcc>
    	// IOWR(BASE, REGNUM, DATA)
        IOWR(TOP_BRAM_0_BASE, 0, i); 			// Address write enabling the reg_0
    20c4:	0007883a 	mov	r3,zero
    20c8:	e0bff717 	ldw	r2,-36(fp)
    20cc:	18800035 	stwio	r2,0(r3)
        IOWR(TOP_BRAM_0_BASE, 1, string[i%30]); // Data write enabling the reg_1
    20d0:	e13ff717 	ldw	r4,-36(fp)
    20d4:	01400784 	movi	r5,30
    20d8:	00022240 	call	2224 <__modsi3>
    20dc:	1007883a 	mov	r3,r2
    20e0:	e0bff804 	addi	r2,fp,-32
    20e4:	10c5883a 	add	r2,r2,r3
    20e8:	10800003 	ldbu	r2,0(r2)
    20ec:	10c03fcc 	andi	r3,r2,255
    20f0:	18c0201c 	xori	r3,r3,128
    20f4:	18ffe004 	addi	r3,r3,-128
    20f8:	00800104 	movi	r2,4
    20fc:	10c00035 	stwio	r3,0(r2)
        IOWR(TOP_BRAM_0_BASE, 2, 1); 			// Pulse on Bram to write enabling reg_2
    2100:	00c00204 	movi	r3,8
    2104:	00800044 	movi	r2,1
    2108:	18800035 	stwio	r2,0(r3)
        char letter = IORD(TOP_BRAM_0_BASE, 3); // Reads Bram enabling reg_3
    210c:	00800304 	movi	r2,12
    2110:	10800037 	ldwio	r2,0(r2)
    2114:	e0bff605 	stb	r2,-40(fp)

int main()
{
    const char string[31] = "matheus augusto burda ++--+++ ";
    int i = 0;
    for (i=0; i<1024; i++){
    2118:	e0bff717 	ldw	r2,-36(fp)
    211c:	10800044 	addi	r2,r2,1
    2120:	e0bff715 	stw	r2,-36(fp)
    2124:	e0bff717 	ldw	r2,-36(fp)
    2128:	10810010 	cmplti	r2,r2,1024
    212c:	103fe51e 	bne	r2,zero,20c4 <main+0x6c>
        IOWR(TOP_BRAM_0_BASE, 0, i); 			// Address write enabling the reg_0
        IOWR(TOP_BRAM_0_BASE, 1, string[i%30]); // Data write enabling the reg_1
        IOWR(TOP_BRAM_0_BASE, 2, 1); 			// Pulse on Bram to write enabling reg_2
        char letter = IORD(TOP_BRAM_0_BASE, 3); // Reads Bram enabling reg_3
    }
  return 0;
    2130:	0005883a 	mov	r2,zero
}
    2134:	e037883a 	mov	sp,fp
    2138:	dfc00117 	ldw	ra,4(sp)
    213c:	df000017 	ldw	fp,0(sp)
    2140:	dec00204 	addi	sp,sp,8
    2144:	f800283a 	ret

00002148 <udivmodsi4>:
    2148:	29001b2e 	bgeu	r5,r4,21b8 <udivmodsi4+0x70>
    214c:	28001a16 	blt	r5,zero,21b8 <udivmodsi4+0x70>
    2150:	00800044 	movi	r2,1
    2154:	0007883a 	mov	r3,zero
    2158:	01c007c4 	movi	r7,31
    215c:	00000306 	br	216c <udivmodsi4+0x24>
    2160:	19c01326 	beq	r3,r7,21b0 <udivmodsi4+0x68>
    2164:	18c00044 	addi	r3,r3,1
    2168:	28000416 	blt	r5,zero,217c <udivmodsi4+0x34>
    216c:	294b883a 	add	r5,r5,r5
    2170:	1085883a 	add	r2,r2,r2
    2174:	293ffa36 	bltu	r5,r4,2160 <udivmodsi4+0x18>
    2178:	10000d26 	beq	r2,zero,21b0 <udivmodsi4+0x68>
    217c:	0007883a 	mov	r3,zero
    2180:	21400236 	bltu	r4,r5,218c <udivmodsi4+0x44>
    2184:	2149c83a 	sub	r4,r4,r5
    2188:	1886b03a 	or	r3,r3,r2
    218c:	1004d07a 	srli	r2,r2,1
    2190:	280ad07a 	srli	r5,r5,1
    2194:	103ffa1e 	bne	r2,zero,2180 <udivmodsi4+0x38>
    2198:	30000226 	beq	r6,zero,21a4 <udivmodsi4+0x5c>
    219c:	2005883a 	mov	r2,r4
    21a0:	f800283a 	ret
    21a4:	1809883a 	mov	r4,r3
    21a8:	2005883a 	mov	r2,r4
    21ac:	f800283a 	ret
    21b0:	0007883a 	mov	r3,zero
    21b4:	003ff806 	br	2198 <udivmodsi4+0x50>
    21b8:	00800044 	movi	r2,1
    21bc:	0007883a 	mov	r3,zero
    21c0:	003fef06 	br	2180 <udivmodsi4+0x38>

000021c4 <__divsi3>:
    21c4:	defffe04 	addi	sp,sp,-8
    21c8:	dc000015 	stw	r16,0(sp)
    21cc:	dfc00115 	stw	ra,4(sp)
    21d0:	0021883a 	mov	r16,zero
    21d4:	20000c16 	blt	r4,zero,2208 <__divsi3+0x44>
    21d8:	000d883a 	mov	r6,zero
    21dc:	28000e16 	blt	r5,zero,2218 <__divsi3+0x54>
    21e0:	00021480 	call	2148 <udivmodsi4>
    21e4:	1007883a 	mov	r3,r2
    21e8:	8005003a 	cmpeq	r2,r16,zero
    21ec:	1000011e 	bne	r2,zero,21f4 <__divsi3+0x30>
    21f0:	00c7c83a 	sub	r3,zero,r3
    21f4:	1805883a 	mov	r2,r3
    21f8:	dfc00117 	ldw	ra,4(sp)
    21fc:	dc000017 	ldw	r16,0(sp)
    2200:	dec00204 	addi	sp,sp,8
    2204:	f800283a 	ret
    2208:	0109c83a 	sub	r4,zero,r4
    220c:	04000044 	movi	r16,1
    2210:	000d883a 	mov	r6,zero
    2214:	283ff20e 	bge	r5,zero,21e0 <__divsi3+0x1c>
    2218:	014bc83a 	sub	r5,zero,r5
    221c:	8021003a 	cmpeq	r16,r16,zero
    2220:	003fef06 	br	21e0 <__divsi3+0x1c>

00002224 <__modsi3>:
    2224:	deffff04 	addi	sp,sp,-4
    2228:	dfc00015 	stw	ra,0(sp)
    222c:	01800044 	movi	r6,1
    2230:	2807883a 	mov	r3,r5
    2234:	20000416 	blt	r4,zero,2248 <__modsi3+0x24>
    2238:	28000c16 	blt	r5,zero,226c <__modsi3+0x48>
    223c:	dfc00017 	ldw	ra,0(sp)
    2240:	dec00104 	addi	sp,sp,4
    2244:	00021481 	jmpi	2148 <udivmodsi4>
    2248:	0109c83a 	sub	r4,zero,r4
    224c:	28000b16 	blt	r5,zero,227c <__modsi3+0x58>
    2250:	180b883a 	mov	r5,r3
    2254:	01800044 	movi	r6,1
    2258:	00021480 	call	2148 <udivmodsi4>
    225c:	0085c83a 	sub	r2,zero,r2
    2260:	dfc00017 	ldw	ra,0(sp)
    2264:	dec00104 	addi	sp,sp,4
    2268:	f800283a 	ret
    226c:	014bc83a 	sub	r5,zero,r5
    2270:	dfc00017 	ldw	ra,0(sp)
    2274:	dec00104 	addi	sp,sp,4
    2278:	00021481 	jmpi	2148 <udivmodsi4>
    227c:	0147c83a 	sub	r3,zero,r5
    2280:	003ff306 	br	2250 <__modsi3+0x2c>

00002284 <__udivsi3>:
    2284:	000d883a 	mov	r6,zero
    2288:	00021481 	jmpi	2148 <udivmodsi4>

0000228c <__umodsi3>:
    228c:	01800044 	movi	r6,1
    2290:	00021481 	jmpi	2148 <udivmodsi4>

00002294 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    2294:	defffe04 	addi	sp,sp,-8
    2298:	dfc00115 	stw	ra,4(sp)
    229c:	df000015 	stw	fp,0(sp)
    22a0:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    22a4:	0009883a 	mov	r4,zero
    22a8:	00022d40 	call	22d4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    22ac:	00023080 	call	2308 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    22b0:	d1200017 	ldw	r4,-32768(gp)
    22b4:	d1600117 	ldw	r5,-32764(gp)
    22b8:	d1a00217 	ldw	r6,-32760(gp)
    22bc:	00020580 	call	2058 <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    22c0:	e037883a 	mov	sp,fp
    22c4:	dfc00117 	ldw	ra,4(sp)
    22c8:	df000017 	ldw	fp,0(sp)
    22cc:	dec00204 	addi	sp,sp,8
    22d0:	f800283a 	ret

000022d4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    22d4:	defffd04 	addi	sp,sp,-12
    22d8:	dfc00215 	stw	ra,8(sp)
    22dc:	df000115 	stw	fp,4(sp)
    22e0:	df000104 	addi	fp,sp,4
    22e4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    22e8:	00023240 	call	2324 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    22ec:	00800044 	movi	r2,1
    22f0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    22f4:	e037883a 	mov	sp,fp
    22f8:	dfc00117 	ldw	ra,4(sp)
    22fc:	df000017 	ldw	fp,0(sp)
    2300:	dec00204 	addi	sp,sp,8
    2304:	f800283a 	ret

00002308 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2308:	deffff04 	addi	sp,sp,-4
    230c:	df000015 	stw	fp,0(sp)
    2310:	d839883a 	mov	fp,sp
}
    2314:	e037883a 	mov	sp,fp
    2318:	df000017 	ldw	fp,0(sp)
    231c:	dec00104 	addi	sp,sp,4
    2320:	f800283a 	ret

00002324 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    2324:	deffff04 	addi	sp,sp,-4
    2328:	df000015 	stw	fp,0(sp)
    232c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2330:	000170fa 	wrctl	ienable,zero
}
    2334:	e037883a 	mov	sp,fp
    2338:	df000017 	ldw	fp,0(sp)
    233c:	dec00104 	addi	sp,sp,4
    2340:	f800283a 	ret
