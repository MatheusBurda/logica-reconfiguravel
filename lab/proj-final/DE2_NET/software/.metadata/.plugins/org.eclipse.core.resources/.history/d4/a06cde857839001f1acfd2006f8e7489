/******************************************************************************
 * Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *
 * All rights reserved. All use of this software and documentation is          *
 * subject to the License Agreement located at the end of this file below.     *
 *******************************************************************************                                                                             *
 * Date - October 24, 2006                                                     *
 * Module - iniche_init.c                                                      *
 *                                                                             *                                                                             *
 ******************************************************************************/

/******************************************************************************
 * NicheStack TCP/IP stack initialization and Operating System Start in main()
 * for Simple Socket Server (SSS) example.
 *
 * This example demonstrates the use of MicroC/OS-II running on NIOS II.
 * In addition it is to serve as a good starting point for designs using
 * MicroC/OS-II and Altera NicheStack TCP/IP Stack - NIOS II Edition.
 *
 * Please refer to the Altera NicheStack Tutorial documentation for details on
 * this software example, as well as details on how to configure the NicheStack
 * TCP/IP networking stack and MicroC/OS-II Real-Time Operating System.
 */

#include <arpa/inet.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <time.h>
#include <unistd.h>

/* MicroC/OS-II definitions */
#include "basic_io.h"
#include "dm9000a.h"
#include "includes.h"

#include "io.h"
#include "system.h"

/* Simple Socket Server definitions */
#include "alt_error_handler.h"
#include "simple_socket_server.h"

/* Nichestack definitions */
#include "ipport.h"
#include "libport.h"
#include "osport.h"

#include "LCD.h"
#include "altera_avalon_pio_regs.h"

/* Definition of task stack for the initial task which will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example tasks.
 */
OS_STK SSSInitialTaskStk[TASK_STACKSIZE];
OS_STK SSSInitialTaskStk2[TASK_STACKSIZE];

OS_FLAG_GRP* event_flag_group;
OS_FLAGS event_flags;

/* Declarations for creating a task with TK_NEWTASK.
 * All tasks which use NicheStack (those that use sockets) must be created this way.
 * TK_OBJECT macro creates the static task object used by NicheStack during operation.
 * TK_ENTRY macro corresponds to the entry point, or defined function name, of the task.
 * inet_taskinfo is the structure used by TK_NEWTASK to create the task.
 */
TK_OBJECT(to_ssstask);
TK_ENTRY(SSSSimpleSocketServerTask);

int correct_answer = 0;
int wrong_answer = 0;
int timed_out = 0;
int player_score = 0;

struct inet_taskinfo ssstask = {
    &to_ssstask,
    "simple socket server",
    SSSSimpleSocketServerTask,
    4,
    APP_STACK_SIZE,
};

typedef unsigned int socklen_t;


/* SSSInitialTask will initialize the NicheStack
 * TCP/IP Stack and then initialize the rest of the Simple Socket Server example
 * RTOS structures and tasks.
 */
void SSSInitialTask(void* task_data) {
    INT8U error_code;

    /*
     * Initialize Altera NicheStack TCP/IP Stack - Nios II Edition specific code.
     * NicheStack is initialized from a task, so that RTOS will have started, and
     * I/O drivers are available.  Two tasks are created:
     *    "Inet main"  task with priority 2
     *    "clock tick" task with priority 3
     */
    alt_iniche_init();
    netmain();

    /* Wait for the network stack to be ready before proceeding.
     * iniche_net_ready indicates that TCP/IP stack is ready, and IP address is obtained.
     */
    while (!iniche_net_ready)
        TK_SLEEP(1);

    /* Now that the stack is running, perform the application initialization steps */

    /* Application Specific Task Launching Code Block Begin */

    printf("\nLoading NIOS\n");

    printf("\nSimple Socket Server starting up\n");

   	// ***********************************************************************************
    // 								Socket creation
   	// ***********************************************************************************
    struct sockaddr_in sa;
	int SocketFD;

	char buffer[1024];

	SocketFD = socket(AF_INET, SOCK_STREAM, 6);
	printf("Socket created.\n");
	sa.sin_family = AF_INET;
	sa.sin_port = htons(7777);
	sa.sin_addr.s_addr = inet_addr("192.168.0.176");
	if (connect(SocketFD, (struct sockaddr *)&sa, sizeof sa) == -1) {
		perror("Connection failed.\n");
		printf("%s\n", strerror(errno));
		close(SocketFD);
		exit(EXIT_FAILURE);
	}

	msleep(1000);
	// ***********************************************************************************

//	printf("Reading buffer...\n");
//	while(recv(SocketFD, buffer, sizeof(buffer), 0) < 0)
//		printf("Reading buffer...\n");
//
//	int complete_reg_content = atoi(buffer);
//
   IOWR(TOP_RTC_0_BASE, 0, 0);
   IOWR(TOP_RTC_0_BASE, 1, 1);

   char text[16] = "";

   int MAX_VALUE = 16777215;
   int read_data;
   int complete_reg_content;

   while(1) {

		if(recv(SocketFD, buffer, sizeof(buffer), 0) < 0)
			break;

		complete_reg_content = atoi(buffer);

		printf("%d\n", complete_reg_content);

		if (complete_reg_content > 0 && complete_reg_content < MAX_VALUE) {
			printf("changing time to %d\n", complete_reg_content);
		    IOWR(TOP_RTC_0_BASE, 0, complete_reg_content);
		    IOWR(TOP_RTC_0_BASE, 1, 1);
		}

	   read_data = IORD(TOP_RTC_0_BASE, 0);

	   sprintf(text, "%02d:%02d:%02d",
			  ((read_data >> 20) & 0xF) * 10 + ((read_data >> 16) & 0xF),
			  ((read_data >> 12) & 0xF) * 10 + ((read_data >> 8) & 0xF),
			  ((read_data >> 4) & 0xF) * 10 + (read_data & 0xF));

	   LCD_Clear();
	   LCD_Show_Text(text);

	   printf("current time -> %02d:%02d:%02d\n",
	   			  ((read_data >> 20) & 0xF) * 10 + ((read_data >> 16) & 0xF),
	   			  ((read_data >> 12) & 0xF) * 10 + ((read_data >> 8) & 0xF),
	   			  ((read_data >> 4) & 0xF) * 10 + (read_data & 0xF));

		if (send(SocketFD, text, sizeof(text), 0) < 0){
			perror("ABORTED: Socket timed out!");
			exit(EXIT_FAILURE);
		}

	   usleep(1000000);
   }


    /* Create the main simple socket server task. */
    TK_NEWTASK(&ssstask);

    /*create os data structures */
    SSSCreateOSDataStructs();

    /* create the other tasks */
    SSSCreateTasks();

    /* Application Specific Task Launching Code Block End */

    /*This task is deleted because there is no need for it to run again */
    error_code = OSTaskDel(OS_PRIO_SELF);
    alt_uCOSIIErrorHandler(error_code, 0);

    while (1)
        ; /* Correct Program Flow should never get here */
}

/* Main creates a single task, SSSInitialTask, and starts task scheduler.
 */

int main(int argc, char* argv[], char* envp[]) {
    srand(time(NULL));
    INT8U error_code;
    INT8U error_code2;
    INT8U error_code_flags;
    DM9000A_INSTANCE(DM9000A_0, dm9000a_0);
    DM9000A_INIT(DM9000A_0, dm9000a_0);
    /* Clear the RTOS timer */
    OSTimeSet(0);

    event_flag_group = OSFlagCreate(0, &error_code_flags);

    /* SSSInitialTask will initialize the NicheStack
     * TCP/IP Stack and then initialize the rest of the Simple Socket Server example
     * RTOS structures and tasks.
     */
    error_code = OSTaskCreateExt(SSSInitialTask,
        NULL,
        (void*)&SSSInitialTaskStk[TASK_STACKSIZE],
        SSS_INITIAL_TASK_PRIORITY,
        SSS_INITIAL_TASK_PRIORITY,
        SSSInitialTaskStk,
        TASK_STACKSIZE,
        NULL,
        0);
    alt_uCOSIIErrorHandler(error_code, 0);

    /*
     * As with all MicroC/OS-II designs, once the initial thread(s) and
     * associated RTOS resources are declared, we start the RTOS. That's it!
     */
    OSStart();

    while (1)
        ; /* Correct Program Flow never gets here. */

    return -1;
}

/******************************************************************************
 *                                                                             *
 * License Agreement                                                           *
 *                                                                             *
 * Copyright (c) 2006 Altera Corporation, San Jose, California, USA.           *
 * All rights reserved.                                                        *
 *                                                                             *
 * Permission is hereby granted, free of charge, to any person obtaining a     *
 * copy of this software and associated documentation files (the "Software"),  *
 * to deal in the Software without restriction, including without limitation   *
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,    *
 * and/or sell copies of the Software, and to permit persons to whom the       *
 * Software is furnished to do so, subject to the following conditions:        *
 *                                                                             *
 * The above copyright notice and this permission notice shall be included in  *
 * all copies or substantial portions of the Software.                         *
 *                                                                             *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  *
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,    *
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE *
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER      *
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING     *
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER         *
 * DEALINGS IN THE SOFTWARE.                                                   *
 *                                                                             *
 * This agreement shall be governed in all respects by the laws of the State   *
 * of California and by the laws of the United States of America.              *
 * Altera does not recommend, suggest or require that this reference design    *
 * file be used in conjunction or combination with any other product.          *
 ******************************************************************************/
