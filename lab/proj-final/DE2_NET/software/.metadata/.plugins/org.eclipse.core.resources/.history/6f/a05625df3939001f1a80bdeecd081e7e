#include <stdio.h>
#include <unistd.h> // For usleep function
#include "io.h"
#include "system.h"

#define HR 21
#define MIN 5
#define SEC 10

int main() {
    // Encode the time into complete_reg_content
    int complete_reg_content = ((HR / 10) << 20) | ((HR % 10) << 16) | ((MIN / 10) << 12) | ((MIN % 10) << 8) | ((SEC / 10) << 4) | (SEC % 10);

    // Decode and print the encoded time
    printf("Decoded time -> %02d:%02d:%02d\n",
           ((complete_reg_content >> 20) & 0xF) * 10 + ((complete_reg_content >> 16) & 0xF),  // Hours
           ((complete_reg_content >> 12) & 0xF) * 10 + ((complete_reg_content >> 8) & 0xF),   // Minutes
           ((complete_reg_content >> 4) & 0xF) * 10 + (complete_reg_content & 0xF));         // Seconds

//    IOWR(TOP_RTC_0_BASE, 0, complete_reg_content);  // Write the encoded time into reg32 on top_rtc

    long double i = 0;
    for (i = 0; i < 10; i++) { // Reduced the loop count for demonstration
        int read_data = IORD(TOP_RTC_0_BASE, 0);  // Read reg32
        printf("Read data: %d\n", read_data);

        // Decode and print the read data
        printf("Decoded time -> %02d:%02d:%02d\n",
               ((read_data >> 20) & 0xF) * 10 + ((read_data >> 16) & 0xF),  // Hours
               ((read_data >> 12) & 0xF) * 10 + ((read_data >> 8) & 0xF),   // Minutes
               ((read_data >> 4) & 0xF) * 10 + (read_data & 0xF));          // Seconds

        usleep(1000000); // Sleep for 1 second (1,000,000 microseconds)
    }
    printf("Finished\n");
    return 0;
}
